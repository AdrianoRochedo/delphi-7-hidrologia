Program Energia_Planilha_CurvaPermanencia;

// Variáveis pré-declaradas
   // Saida   : TwsOutPut
   // Projeto : TprProjeto_Rosen

var
  
  IntTotal : Integer;
  i        : Integer;
  Queimado : Object;
  Paracatu : Object;

  Planilha  : Object;
  Planilha1 : Object;
//  Grafico  : Object;
//  S1       : Object;
//  S2       : Object;
 
  VetorEnergiaQueimado  : Object;
  VetorEnergiaParacatu  : Object;
  VetEnerQueimDecr      : Object;
  VetEnerParacDecr      : Object;
  VetEnerQueimAcum      : Object;
  VetEnerParacAcum      : Object;
  VetEnerQueimProb      : Object;
  VetEnerParacProb      : Object;
  VetorTempo            : Object;
  SomaQueimado          : Real;
  SomaParacatu          : Real;
  Aux                   : Real;

Begin
  // Inialização do intervalo total
  IntTotal := Projeto.Total_IntSim;

  // Inicialização dos reservatórios;
  Queimado := Projeto.PCPeloNome('Queimado');
  Paracatu := Projeto.PCPeloNome('Paracatu');

  // Criação e inicialização dos vetores 
  VetorTempo           := wsSIVecCreate(IntTotal);
  VetorEnergiaQueimado := wsDFVecCreate(IntTotal);
  VetorEnergiaParacatu := wsDFVecCreate(IntTotal);
  VetEnerQueimDecr     := wsDFVecCreate(IntTotal);
  VetEnerParacDecr     := wsDFVecCreate(IntTotal);
  // VetEnerQueimAcum     := wsDFVecCreate(IntTotal);
  // VetEnerParacAcum     := wsDFVecCreate(IntTotal);
  VetEnerQueimProb     := wsDFVecCreate(IntTotal);
  VetEnerParacProb     := wsDFVecCreate(IntTotal);

  //  Preechimento dos vetores
  for i := 1 to IntTotal do
    begin
    VetorTempo.Set(i, i);
    VetorEnergiaQueimado.Set(i, Queimado.ObtemEnergia(i));
    VetorEnergiaParacatu.Set(i, Paracatu.ObtemEnergia(i));
    end;

  // Cálculo da Curva de Permanência para Volumes do Queimado
  VetEnerQueimDecr := VetorEnergiaQueimado;
  VetEnerQueimDecr.Sort(True);
  VetEnerQueimAcum := VetEnerQueimDecr.Accum(False);
  SomaQueimado := VetEnerQueimDecr.Total(IntTotal);
  for i := 1 to IntTotal do
    Begin
    Aux := 100*VetEnerQueimAcum.Get(i)/SomaQueimado;
    VetEnerQueimProb.Set(i, Aux);
    end;

  // Cálculo da Curva de Permanência para Volumes do Paracatu
  VetEnerParacDecr := VetorEnergiaParacatu;
  VetEnerParacDecr.Sort(False);
  VetEnerParacAcum := VetEnerParacDecr.Accum(True);
  SomaParacatu := VetEnerParacDecr.Total(IntTotal);
  for i := 1 to IntTotal do
    Begin
    Aux := 100*VetEnerParacAcum.Get(i)/SomaParacatu;
    VetEnerParacProb.Set(i, Aux);
    end;

  // Apresentação da Energia Gerada (em Planilha)
  Planilha := CreateObject('TPlanilha');
  Planilha.Write(1, 1, 'Valores da Energia Gerada nos Reservatórios');
  Planilha.Write(2, 1, 'Projeto ' + Projeto.Nome);
  Planilha.Write(4, 1, 'Dt');
  Planilha.Write(4, 2, 'Queimado');
  Planilha.Write(4, 3, 'Paracatu');
  Planilha.WriteVecInCol(VetorTempo, 1, 5);
  Planilha.WriteVecInCol(VetorEnergiaQueimado, 2, 5);
  Planilha.WriteVecInCol(VetorEnergiaParacatu, 3, 5);

  // Apresentação da Curva de Permanência da Energia Gerada
  // (em Planilha)

  Planilha1 := CreateObject('TPlanilha');
  Planilha1.Write(1, 1, 'Curva de Permanência da Energia Gerada nos Reservatórios');
  Planilha1.Write(2, 1, 'Projeto ' + Projeto.Nome);
  Planilha1.Write(3, 1, 'SomaQueimado');
  Planilha1.WriteFloat(3, 2 , SomaQueimado);
  Planilha1.Write(3, 4, 'SomaParacatu');
  Planilha1.WriteFloat(3, 5 , SomaParacatu);
  Planilha1.Write(4, 1, 'Dt');
  Planilha1.Write(4, 3, 'Queimado');
  Planilha1.Write(4, 6, 'Paracatu');
  Planilha1.Write(5, 2, 'Volume');
  Planilha1.Write(5, 3, 'Vol Ac');
  Planilha1.Write(5, 4, 'Prob.');
  Planilha1.Write(5, 5, 'Volume');
  Planilha1.Write(5, 6, 'Vol Ac');
  Planilha1.Write(5, 7, 'Prob.');
  Planilha1.WriteVecInCol(VetorTempo, 1, 6);
  Planilha1.WriteVecInCol(VetEnerQueimDecr, 2, 6);
  Planilha1.WriteVecInCol(VetEnerQueimAcum, 3, 6);
  Planilha1.WriteVecInCol(VetEnerQueimProb, 4, 6);
  Planilha1.WriteVecInCol(VetEnerParacDecr, 5, 6);
  Planilha1.WriteVecInCol(VetEnerParacAcum, 6, 6);
  Planilha1.WriteVecInCol(VetEnerParacProb, 7, 6);

{
  Grafico := CreateObject('TgrGrafico');
  S1 := Grafico.Series.AddBarSerie('I.C.',   getColor('red'),    0, 1);
  S2 := Grafico.Series.AddBarSerie('I.R.',   getColor('green'),  0, 1);

  Cor := getColor('TeeColor');
}

  // Apresentação dos resultados
  
  
  // Mostra os dados em forma de planilha e gráfico
  Planilha.Show;
  Planilha1.Show;
  //Saida.Show;

 {
  ATENÇÃO:
     Os objetos Planilha, Grafico e Series (S1..S4) não deverão ser destruídos
     pois continuarão a existirem após a execução de script (mostrarão os dados) e
     serão destruídos automaticamente ao serem fechados pelo usuário.
  }
end.
